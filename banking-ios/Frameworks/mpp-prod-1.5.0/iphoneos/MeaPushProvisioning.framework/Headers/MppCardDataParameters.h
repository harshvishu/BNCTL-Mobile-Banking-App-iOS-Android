//
//  MppCardDataParameters.h
//  MeaPushProvisioning
//
//  Copyright Â© 2019 MeaWallet AS. All rights reserved.
//

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * Get Tokenization Receipt parameter type.
 */
typedef NS_ENUM(NSInteger, CardDataType) {
    
    /**
     * Card data with card ID and secret.
     */
    CardDataTypeSecret = 0,
    
    /**
     * Card data with encrypted PAN data.
     */
    CardDataTypeEncryptedPan
};

/**
 * Class describing card data parameters.
 */
@interface MppCardDataParameters : NSObject

/**
 * @name MppCardDataParameters properties
 */

/**
 * Get Tokenization Receipt parameter type.
 */
@property (nonatomic, assign, readonly) CardDataType type;

/**
 * @name Properties for card secret
 */

/**
 * Contains Card ID selected by the Issuer, which is later used by the WSP to send to the Issuer for validation.
 * Max length 64.
 *
 * @return The card id.
 */
@property (nonatomic, copy, readonly, nullable) NSString *cardId;

/**
 * Contains secret value generated by the Issuer, which is later used to the WSP to exchange it
 * versus real card data from the Issuer. Max length 64.
 *
 * @return The card secret.
 */
@property (nonatomic, copy, readonly, nullable) NSString *cardSecret;

/**
 * @name Properties for encrypted PAN
 */

/**
 * Encrypted card data
 *
 * @return Encrypted card data.
 */
@property (nonatomic, copy, readonly, nullable) NSString *encryptedCardData;

/**
 * Public Key Fingerprint. Used to recognise the key to be used for AES key decryption.
 *
 * @return Public Key Fingerprint.
 */
@property (nonatomic, copy, readonly, nullable) NSString *publicKeyFingerprint;

/**
 * Encrypted AES key used for encrypted card data.
 *
 * @return Encrypted AES key.
 */
@property (nonatomic, copy, readonly, nullable) NSString *encryptedKey;

/**
 * Initial Vector used for encrypted card data.
 *
 * @return Initial Vector.
 */
@property (nonatomic, copy, readonly, nullable) NSString *initialVector;


/**
 * @name MppCardDataParameters methods
 */

/**
 * Create card data parameters with card secret.
 *
 * @param cardId  Contains Card ID selected by the Issuer, which is later used by the WSP to send to the Issuer for validation.
 *               Max length 64.
 * @param cardSecret  Contains secret value generated by the Issuer, which is later used to the WSP to exchange it
 *                   versus real card data from the Issuer. Max length 64.
 *
 * @return MppCardDataParameters object instance.
 */
+ (instancetype)cardDataParametersWithCardId:(NSString *_Nonnull)cardId
                                  cardSecret:(NSString *_Nonnull)cardSecret;

/**
 * Create card data parameters with encrypted PAN data.
 *
 * @param encryptedCardData  Encrypted card data.
 * @param publicKeyFingerprint  Public Key Fingerprint. Used to recognise the key to be used for AES key decryption.
 * @param encryptedKey  Encrypted AES key used for encrypted card data.
 * @param initialVector  Initial Vector used for encrypted card data.
 *
 * @return MppCardDataParameters object instance.
 */
+ (instancetype)cardDataParametersWithEncryptedCardData:(NSString *_Nonnull)encryptedCardData
                                   publicKeyFingerprint:(NSString *_Nonnull)publicKeyFingerprint
                                           encryptedKey:(NSString *_Nonnull)encryptedKey
                                          initialVector:(NSString *_Nonnull)initialVector;

/**
 * Verify if card data parameters are valid.
 *
 * @return Bool value if card data parameters are valid.
 */
- (BOOL)isValid;

@end

NS_ASSUME_NONNULL_END
